name: build

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
    paths:
      - "GUI/**"
  pull_request:

env:
  SOURCE_DIR: ${{ github.workspace }}/GUI
  QT_VERSION: 5.15.2
  APPIMAGE_URL: https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage

jobs:
  linux:
    runs-on: ubuntu-18.04

    steps:
      - name: setup FUSE
        run: |
          sudo apt-get update
          sudo apt-get install fuse libfuse2

      - name: checkout repo
        uses: actions/checkout@v3
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0

      - name: install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          target: desktop
          arch: gcc_64
          dir: ${{ runner.temp }}
          setup-python: true

      - name: create build directory
        run: mkdir "${{ env.SOURCE_DIR }}/build"

      - name: build
        working-directory: ${{ env.SOURCE_DIR }}/build
        # 'make' is the actual build command
        # build-wrapper is there for Sonarqube analysis
        run: |
          qmake -r ${{ env.SOURCE_DIR }}/GUI.pro
          build-wrapper-linux-x86-64 --out-dir . make

      - name: run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output=.

      - name: create an AppImage
        working-directory: ${{ env.SOURCE_DIR }}/build
        run: |
          wget -O deploy.AppImage ${{ env.APPIMAGE_URL }}
          chmod +x deploy.AppImage
          ld_path="${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/gcc_64/lib/"
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${ld_path}"
          cp "${{ env.SOURCE_DIR }}/GUI.desktop" \
            "${{ env.SOURCE_DIR }}/GUI.png"      \
            ./
          ./deploy.AppImage GUI.desktop         \
            -appimage                           \
            -no-translations                    \
            -qmldir="${{ env.SOURCE_DIR }}"     \
            -extra-plugins=renderers
          rm ./deploy.AppImage

      - name: upload the AppImage
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.SOURCE_DIR }}/build/*.AppImage
