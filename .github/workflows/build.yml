name: build

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  pull_request:

env:
  SOURCE_DIR: ${{ github.workspace }}/GUI
  QT_VERSION: "5.15.2"
  APPIMAGE_URL: https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
  BUILD_WRAPPER_OUT_DIR: ${{ github.workspace }}/build_wrapper_output_directory

jobs:
  linux:
    runs-on: ubuntu-20.04

    steps:
      - name: setup FUSE
        run: |
          sudo apt-get update
          sudo apt-get install fuse libfuse2

      - name: checkout repo
        uses: actions/checkout@v3
        with:
          # shallow clones should be disabled for better relevancy of analysis
          fetch-depth: 0

      - name: install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          target: desktop
          arch: gcc_64
          dir: ${{ runner.temp }}
          setup-python: true

      - name: create build directory
        run: mkdir "${{ env.SOURCE_DIR }}/build"

      - name: build
        working-directory: ${{ env.SOURCE_DIR }}/build
        # 'make' is the actual build command
        # build-wrapper is there for Sonarqube analysis
        run: |
          qmake -r "${{ env.SOURCE_DIR }}/GUI.pro"
          build-wrapper-linux-x86-64                     \
            --out-dir "${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            make

      - name: run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner                                                                    \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

      - name: create an AppImage
        working-directory: ${{ env.SOURCE_DIR }}/build
        run: |
          wget -O deploy.AppImage ${{ env.APPIMAGE_URL }}
          chmod +x deploy.AppImage
          ld_path="${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/gcc_64/lib/"
          export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${ld_path}"
          cp "${{ env.SOURCE_DIR }}/GUI.desktop" \
            "${{ env.SOURCE_DIR }}/GUI.png"      \
            ./
          ./deploy.AppImage GUI.desktop         \
            -appimage                           \
            -no-translations                    \
            -qmldir="${{ env.SOURCE_DIR }}"
          rm ./deploy.AppImage

      - name: upload the AppImage
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.SOURCE_DIR }}/build/*.AppImage
